package ada;
import org.opencv.core.Core;
import org.opencv.core.Point;
import java.util.Vector;
import java.io.File;
import java.io.IOException;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
public class hull {
	static String s = "C:\\\\Users\\\\Saikarthik\\\\Desktop\\\\benz.jpg";

    // To find orientation of ordered triplet (p, q, r). 
    // The function returns following values 
    // 0 --> p, q and r are colinear 
    // 1 --> Clockwise 
    // 2 --> Counterclockwise 
    public static int orientation(Point p, Point q, Point r) 
    { 
        double val = (q.y - p.y) * (r.x - q.x) - 
                  (q.x - p.x) * (r.y - q.y); 

        if (val == 0) return 0;  // collinear 
        return (val > 0)? 1: 2; // clock or counterclock wise 
    } 

    // Prints convex hull of a set of n points. 
    public static void convexHull(Point points[], int n)
    { 
        // There must be at least 3 points 
        if (n < 3) return; 

        // Initialize Result 
        Vector<Point> hull = new Vector<Point>(); 

        // Find the leftmost point 
        int l = 0; 
        for (int i = 1; i < n; i++) 
            if (points[i].x < points[l].x) 
                l = i; 

        // Start from leftmost point, keep moving  
        // counterclockwise until reach the start point 
        // again. This loop runs O(h) times where h is 
        // number of points in result or output. 
        int p = l, q; 
        do
        { 
            // Add current point to result 
            hull.add(points[p]); 

            // Search for a point 'q' such that  
            // orientation(p, x, q) is counterclockwise  
            // for all points 'x'. The idea is to keep  
            // track of last visited most counterclock- 
            // wise point in q. If any point 'i' is more  
            // counterclock-wise than q, then update q. 
            q = (p + 1) % n; 

            for (int i = 0; i < n; i++) 
            { 
               // If i is more counterclockwise than  
               // current q, then update q 
               if (orientation(points[p], points[i], points[q]) 
                                                   == 2) 
                   q = i; 
            } 

            // Now q is the most counterclockwise with 
            // respect to p. Set p as q for next iteration,  
            // so that q is added to result 'hull' 
            p = q; 

        } while (p != l);  // While we don't come to first  
                           // point 

        // Print Result 
        for (Point temp : hull) 
            System.out.println("(" + temp.x + ", " + 
                                temp.y + ")"); 
        System.out.println("No of points that make convex hull of a given object is "+hull.size());
    //} 

   // public static void set(Point hull) throws IOException
    //{
	BufferedImage img = null;
        File f = null;

        //read image
        try{
          f = new File(s);
          img = ImageIO.read(f);
        }catch(IOException e){
          System.out.println(e);
        }

        //get image width and height
        int width = img.getWidth();
        int height = img.getHeight();
        int a = 255;
        int r = 255;
        int g = 255;
        int b = 255;
        int po;
 for(int i=0; i<width;i++)
 {
	 for(int j=0; j<height;j++)
	 {
        //set the pixel value
        po = (a<<24) | (r<<16) | (g<<8) | b;
        img.setRGB(i, j, po);
	 }
 }
 r=0;
 g=0;
 b=0;
 for (Point temp : hull)
 {
	 po = (a<<24) | (r<<16) | (g<<8) | b;
     img.setRGB((int)temp.x, (int)temp.y, po);
 }
 try{
     f = new File("C:\\Users\\Saikarthik\\Desktop\\Output.jpg");
     ImageIO.write(img, "jpg", f);
   }catch(IOException e){
     System.out.println(e);
   }

    }

    /* Driver program to test above function */
    public static void main(String[] args)
    { 
	 System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        demo ch =new demo(args);
        Point points[] = ch.point; 

        int n = points.length; 
        convexHull(points, n); 

    } 
}

